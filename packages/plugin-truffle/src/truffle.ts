import { SourceUnit } from 'solidity-ast';

export interface ContractClass {
  new (address: string): ContractInstance;
  deployed(): Promise<ContractInstance>;
  setProvider(provider: unknown): void;
  defaults(defaults: ContractClassDefaults): void;
  bytecode: string;
  currentProvider: unknown;
  class_defaults: ContractClassDefaults;
  contractName: string;
  address?: string;
}

export interface ContractClassDefaults {
  from: string;
}

export interface ContractInstance {
  address: string;
  contract: {
    methods: {
      initialize(...args: unknown[]): {
        encodeABI(): string;
      };
    };
  };
  [other: string]: any;
}

export interface TruffleArtifact {
  contractName: string;
  sourcePath: string;
  source: string;
  bytecode: string;
  ast: SourceUnit;
}

// The argument can't be of type TruffleArtifact because we use this with
// artifacts generated by Buidler, which are only partially compatible.
export const TruffleContract = require('@truffle/contract') as (artifact: unknown) => ContractClass;
