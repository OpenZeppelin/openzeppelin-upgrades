import { SourceUnit } from 'solidity-ast';

export interface ContractClass {
  new (address: string): ContractInstance;
  'new'(...args: unknown[]): ContractInstance;
  deployed(): Promise<ContractInstance>;
  setProvider(provider: unknown): void;
  defaults(defaults: ContractClassDefaults): void;
  bytecode: string;
  currentProvider: unknown;
  class_defaults: ContractClassDefaults;
  contractName: string;
  address?: string;
}

export interface ContractClassDefaults {
  from: string;
}

export interface ContractInstance {
  address: string;
  contract: {
    methods: {
      initialize(
        ...args: unknown[]
      ): {
        encodeABI(): string;
      };
    };
  };
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  [other: string]: any;
}

export interface TruffleArtifact {
  contractName: string;
  sourcePath: string;
  source: string;
  bytecode: string;
  ast: SourceUnit;
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type TruffleProviderResult = { result: any; error: { message: string } };

export interface TruffleProvider {
  send(
    args: { method: string; params?: unknown[] },
    callback: (err: unknown, value: TruffleProviderResult) => void,
  ): void;
}

// The argument can't be of type TruffleArtifact because we use this with
// artifacts generated by Buidler, which are only partially compatible.
// eslint-disable-next-line @typescript-eslint/no-var-requires
export const TruffleContract = require('@truffle/contract') as (artifact: unknown) => ContractClass;
